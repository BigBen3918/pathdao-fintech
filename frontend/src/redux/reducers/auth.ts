import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import Action from "../../service";

interface AuthState {
    authStatus: boolean;
    email: string;
    address: string;
    status: "idle" | "pending" | "failed";
}

const initialState: AuthState = {
    authStatus: false,
    email: "",
    address: "",
    status: "idle",
};

export const tokenAsync: any = createAsyncThunk("auth/fetchToken", async () => {
    const response = await Action.CheckAuth();
    // The value we return becomes the `fulfilled` action payload
    return response;
});

export const authSlice = createSlice({
    name: "auth",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setAddress: (state, action: PayloadAction<string>) => {
            state.address = action.payload;
        },
        setAuth: (state, action: any) => {
            state.authStatus = true;
            state.email = action.payload.email;
            localStorage.setItem("token", action.payload.token);
        },
        removeAuth: (state) => {
            state.authStatus = false;
            state.email = "";
            state.address = "";
            localStorage.removeItem("token");
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(tokenAsync.pending, (state) => {
                state.status = "pending";
            })
            .addCase(tokenAsync.fulfilled, (state, action) => {
                state.status = "idle";
                switch (action.payload) {
                    case "auth_error":
                        state.authStatus = false;
                        state.email = "";
                        state.address = "";
                        localStorage.removeItem("token");
                        break;
                    default:
                        state.authStatus = true;
                        state.email = action.payload.email;
                        localStorage.setItem("token", action.payload.token);
                }
            })
            .addCase(tokenAsync.rejected, (state) => {
                state.status = "failed";
                removeAuth();
            });
    },
});

export const { setAddress, setAuth, removeAuth } = authSlice.actions;

// Default App
export default authSlice.reducer;
